package {{if .env.layer}}{{.env.handler}}{{else}}{{.raw}}{{end}}

import (
	"context"
	"github.com/core-go/core"
	"github.com/core-go/search"
	"net/http"
	"reflect"{{if .env.layer}}

	. "{{.env.go_module}}/internal/{{.env.filter}}"
	. "{{.env.go_module}}/internal/{{.env.model}}"
	. "{{.env.go_module}}/internal/{{.env.service}}"{{end}}
)

func New{{.Name}}{{.env.Handler}}(find func(context.Context, interface{}, interface{}, int64, ...int64) (int64, string, error), service {{.Name}}{{.env.Service}}, status core.StatusConfig, logError func(context.Context, string, ...map[string]interface{}), validate func(context.Context, interface{}) ([]core.ErrorMessage, error), action *core.ActionConfig) *{{.Name}}{{.env.Handler}} {
	filterType := reflect.TypeOf({{.Name}}{{.env.Filter}}{})
	modelType := reflect.TypeOf({{.Name}}{})
	params := core.CreateParams(modelType, &status, logError, validate, action)
	searchHandler := search.NewSearchHandler(find, modelType, filterType, logError, params.Log)
	return &{{.Name}}{{.env.Handler}}{service: service, SearchHandler: searchHandler, Params: params}
}

type {{.Name}}{{.env.Handler}} struct {
	service {{.Name}}{{.env.Service}}
	*search.SearchHandler
	*core.Params
}

func (h *{{.Name}}{{.env.Handler}}) Load(w http.ResponseWriter, r *http.Request) {
	id := core.{{.goGetId}}{{ if ne .goGetId "GetId"}}(w, r){{else}}(w, r, h.ModelType, h.Keys, h.Indexes){{end}}
	if {{.goCheckId}} {
		res, err := h.service.Load(r.Context(), {{.goIdPrefix}}id)
		core.RespondModel(w, r, res, err, h.Error, nil)
	}
}
func (h *{{.Name}}{{.env.Handler}}) Create(w http.ResponseWriter, r *http.Request) {
	var {{.name}} {{.Name}}
	er1 := core.Decode(w, r, &{{.name}})
	if er1 == nil {
		errors, er2 := h.Validate(r.Context(), &{{.name}})
		if !core.HasError(w, r, errors, er2, *h.Status.ValidationError, h.Error, h.Log, h.Resource, h.Action.Create) {
			res, er3 := h.service.Create(r.Context(), &{{.name}})
			core.AfterCreated(w, r, &{{.name}}, res, er3, h.Status, h.Error, h.Log, h.Resource, h.Action.Create)
		}
	}
}
func (h *{{.Name}}{{.env.Handler}}) Update(w http.ResponseWriter, r *http.Request) {
	var {{.name}} {{.Name}}
	er1 := core.DecodeAndCheckId(w, r, &{{.name}}, h.Keys, h.Indexes)
	if er1 == nil {
		errors, er2 := h.Validate(r.Context(), &{{.name}})
		if !core.HasError(w, r, errors, er2, *h.Status.ValidationError, h.Error, h.Log, h.Resource, h.Action.Update) {
			res, er3 := h.service.Update(r.Context(), &{{.name}})
			core.HandleResult(w, r, &{{.name}}, res, er3, h.Status, h.Error, h.Log, h.Resource, h.Action.Update)
		}
	}
}
func (h *{{.Name}}{{.env.Handler}}) Patch(w http.ResponseWriter, r *http.Request) {
	var {{.name}} {{.Name}}
	r, json, er1 := core.BuildMapAndCheckId(w, r, &{{.name}}, h.Keys, h.Indexes)
	if er1 == nil {
		errors, er2 := h.Validate(r.Context(), &{{.name}})
		if !core.HasError(w, r, errors, er2, *h.Status.ValidationError, h.Error, h.Log, h.Resource, h.Action.Patch) {
			res, er3 := h.service.Patch(r.Context(), json)
			core.HandleResult(w, r, json, res, er3, h.Status, h.Error, h.Log, h.Resource, h.Action.Patch)
		}
	}
}
func (h *{{.Name}}{{.env.Handler}}) Delete(w http.ResponseWriter, r *http.Request) {
	id := core.{{.goGetId}}{{ if ne .goGetId "GetId"}}(w, r){{else}}(w, r, h.ModelType, h.Keys, h.Indexes){{end}}
    if {{.goCheckId}} {
		res, err := h.service.Delete(r.Context(), {{.goIdPrefix}}id)
		core.HandleDelete(w, r, res, err, h.Error, h.Log, h.Resource, h.Action.Delete)
	}
}
