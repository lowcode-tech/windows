import { Db } from 'mongodb';
import { buildQuery, SearchBuilder } from 'mongodb-extension';
import { Log, Manager, Search } from 'onecore';
import { {{.Name}}, {{.Name}}{{.env.Filter}}{{if .keys}}{{.tsId}}, {{end}}, {{.name}}{{.env.Model}}, {{.Name}}{{.env.Repository}}, {{.Name}}{{.env.Service}} } from './{{.path}}';
import { {{.Name}}{{.env.Controller}} } from './{{.path}}-{{.env.controller}}';
export * from './{{.path}}';
export { {{.Name}}{{.env.Controller}} };

import { Mongo{{.Name}}{{.env.Repository}} } from './mongo-{{.path}}-{{.env.repository}}';

export class {{.Name}}{{.env.Manager}} extends Manager<{{.Name}}, {{.tsId}}, {{.Name}}{{.env.Filter}}> implements {{.Name}}{{.env.Service}} {
  constructor(search: Search<{{.Name}}, {{.Name}}{{.env.Filter}}>, {{.env.repository}}: {{.Name}}{{.env.Repository}}) {
    super(search, {{.env.repository}});
  }
}
export function {{.env.use}}{{.Name}}{{.env.useService}}(db: Db): {{.Name}}{{.env.Service}} {
  const {{.env.builder}} = new SearchBuilder<{{.Name}}, {{.Name}}{{.env.Filter}}>(db, '{{.table}}', buildQuery, {{.name}}{{.env.Model}});
  const {{.env.repository}} = new Mongo{{.Name}}{{.env.Repository}}(db);
  return new {{.Name}}{{.env.Manager}}({{.env.builder}}.search, {{.env.repository}});
}
export function {{.env.use}}{{.Name}}{{.env.Controller}}(log: Log, db: Db): {{.Name}}{{.env.Controller}} {
  return new {{.Name}}{{.env.Controller}}(log, {{.env.use}}{{.Name}}{{.env.useService}}(db));
}
